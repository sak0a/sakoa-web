name: Deploy to Plesk

on:
  push:
    branches: [ main, master ]  # Deploy when pushing to main/master branch
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Clean and install dependencies
      run: |
        # Clean any cached build artifacts and follow npm's recommendation for optional dependency issues
        rm -rf .nuxt .output dist node_modules/.cache node_modules package-lock.json
        # Use npm install instead of npm ci to better handle optional dependencies
        npm install

    - name: Build project (with fallback handling)
      run: |
        # Try standard build first, fallback to CI build script if needed
        npm run build || npm run ci-build
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        
    - name: Deploy to Plesk via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        # Alternative: use key instead of password
        # key: ${{ secrets.PLESK_SSH_KEY }}
        script: |
          # Navigate to httpdocs directory
          cd /var/www/vhosts/sakoa.xyz/httpdocs

          # Backup current deployment (optional)
          if [ -d "backup" ]; then rm -rf backup; fi
          mkdir backup
          cp -r .output backup/ 2>/dev/null || true
          cp -r server backup/ 2>/dev/null || true

          # Clear current files and any cached build artifacts (except backup)
          rm -rf .output server 2>/dev/null || true
          rm -rf .nuxt dist node_modules/.cache 2>/dev/null || true
          rm -f restart.txt tmp/restart.txt .deployment_trigger 2>/dev/null || true
          
    - name: Upload built files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        # Alternative: use key instead of password
        # key: ${{ secrets.PLESK_SSH_KEY }}
        source: ".output/*,server/*,trigger-restart.sh,scripts/diagnose-deployment.sh,scripts/test-server-start.js"
        target: "/var/www/vhosts/sakoa.xyz/httpdocs"
        strip_components: 0  # Keep directory structure

    - name: Create environment file
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        script: |
          cd /var/www/vhosts/sakoa.xyz/httpdocs/.output/server
          cat > .env << EOF
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          EOF
        
    - name: Set file permissions and trigger deployment restart
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        script: |
          cd /var/www/vhosts/sakoa.xyz/httpdocs

          # Set file permissions
          find .output -type f -exec chmod 644 {} \;
          find .output -type d -exec chmod 755 {} \;
          find server -type f -exec chmod 644 {} \; 2>/dev/null || true
          find server -type d -exec chmod 755 {} \; 2>/dev/null || true
          chmod 600 .output/server/.env

          # Make server and scripts executable
          chmod +x .output/server/index.mjs
          chmod +x trigger-restart.sh 2>/dev/null || true

          # Create deployment trigger for systemd watcher
          echo "🎯 Creating deployment trigger for systemd service..."
          echo "$(date '+%Y-%m-%d %H:%M:%S') - Deployment triggered by GitHub Actions" > .deployment_trigger

          echo "✅ Deployment trigger (.deployment_trigger) created successfully"
          echo "📋 The systemd service 'sakoa-deployment-watcher' will detect this file and restart the Node.js application"

          # Fallback: Traditional Passenger restart methods (in case systemd service is not running)
          echo "🔄 Creating fallback Passenger restart triggers..."
          touch restart.txt 2>/dev/null || true
          mkdir -p tmp && touch tmp/restart.txt 2>/dev/null || true
          touch .output/server/restart.txt 2>/dev/null || true

          echo "✅ All restart triggers created - deployment completed"

    - name: Test server startup
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        script: |
          cd /var/www/vhosts/sakoa.xyz/httpdocs
          echo "🧪 Running server startup test..."
          node scripts/test-server-start.js

    - name: Run deployment diagnostics
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        script: |
          cd /var/www/vhosts/sakoa.xyz/httpdocs
          chmod +x scripts/diagnose-deployment.sh
          ./scripts/diagnose-deployment.sh

    - name: Deployment notification
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "🌐 Site should be live at: https://sakoa.xyz"
        echo "🔍 Check the diagnostic output above for any issues"
