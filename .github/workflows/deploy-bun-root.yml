name: Deploy to Ubuntu Root Server (Bun)

on:
  push:
    branches: [ main, master ]  # Deploy when pushing to main/master branch
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Build project
      run: bun run build
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
        HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
        
    - name: Stop application service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ROOT_SERVER_HOST }}
        username: ${{ secrets.ROOT_SERVER_USER }}
        password: ${{ secrets.ROOT_SERVER_PASSWORD }}
        script: |
          echo "🛑 Stopping dodgeball application service..."
          # Try to stop service - if user has sudo access, use it; otherwise skip
          if sudo -n systemctl stop dodgeball-app 2>/dev/null; then
            echo "✅ Service stopped successfully"
          else
            echo "⚠️ Could not stop service (may require manual stop or service not running)"
          fi

    - name: Backup and prepare deployment directory
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ROOT_SERVER_HOST }}
        username: ${{ secrets.ROOT_SERVER_USER }}
        password: ${{ secrets.ROOT_SERVER_PASSWORD }}
        script: |
          echo "💾 Preparing deployment directory..."

          # Create deployment directory if it doesn't exist
          mkdir -p /home/dodgeball-user/app

          # Create backup if previous deployment exists
          if [ -d "/home/dodgeball-user/app/.output" ] || [ -d "/home/dodgeball-user/app/server" ]; then
            echo "📦 Creating backup of current deployment..."
            rm -rf /home/dodgeball-user/app-backup 2>/dev/null || true
            cp -r /home/dodgeball-user/app /home/dodgeball-user/app-backup 2>/dev/null || true
            echo "✅ Backup created successfully"
          else
            echo "ℹ️ No existing deployment to backup"
          fi

          # Clear current deployment files
          echo "🧹 Clearing current deployment files..."
          rm -rf /home/dodgeball-user/app/.output /home/dodgeball-user/app/server 2>/dev/null || true
          echo "✅ Deployment directory prepared"
          
    - name: Upload built files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.ROOT_SERVER_HOST }}
        username: ${{ secrets.ROOT_SERVER_USER }}
        password: ${{ secrets.ROOT_SERVER_PASSWORD }}
        source: ".output/*,server/*"
        target: "/home/dodgeball-user/app"
        strip_components: 0
        
    - name: Set file ownership and permissions
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ROOT_SERVER_HOST }}
        username: ${{ secrets.ROOT_SERVER_USER }}
        password: ${{ secrets.ROOT_SERVER_PASSWORD }}
        script: |
          echo "🔐 Setting file ownership and permissions..."

          # Try to set ownership if we have sudo access
          if sudo -n chown -R dodgeball-user:dodgeball-user /home/dodgeball-user/app 2>/dev/null; then
            echo "✅ File ownership set to dodgeball-user"
          else
            echo "⚠️ Could not change ownership (files owned by current user)"
          fi

          # Set file permissions
          cd /home/dodgeball-user/app
          find .output -type f -exec chmod 644 {} \; 2>/dev/null || true
          find .output -type d -exec chmod 755 {} \; 2>/dev/null || true
          find server -type f -exec chmod 644 {} \; 2>/dev/null || true
          find server -type d -exec chmod 755 {} \; 2>/dev/null || true
          chmod +x .output/server/index.mjs 2>/dev/null || true
          echo "✅ File permissions set successfully"
          
    - name: Create environment file
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ROOT_SERVER_HOST }}
        username: ${{ secrets.ROOT_SERVER_USER }}
        password: ${{ secrets.ROOT_SERVER_PASSWORD }}
        script: |
          echo "📝 Creating environment configuration..."
          cd /home/dodgeball-user/app/.output/server
          cat > .env << 'EOF'
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          STEAM_API_KEY=${{ secrets.STEAM_API_KEY }}
          HUGGINGFACE_API_KEY=${{ secrets.HUGGINGFACE_API_KEY }}
          PORT=3000
          HOST=127.0.0.1
          EOF
          chmod 600 .env
          echo "✅ Environment file created successfully"
          
    - name: Install Bun dependencies on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ROOT_SERVER_HOST }}
        username: ${{ secrets.ROOT_SERVER_USER }}
        password: ${{ secrets.ROOT_SERVER_PASSWORD }}
        script: |
          echo "📦 Installing Bun dependencies on server..."
          cd /home/dodgeball-user/app/.output/server

          # Try to use dodgeball-user's Bun installation, fallback to system Bun
          if [ -f "/home/dodgeball-user/.bun/bin/bun" ]; then
            /home/dodgeball-user/.bun/bin/bun install --production 2>/dev/null || echo "No package.json found or dependencies already satisfied"
          elif command -v bun >/dev/null 2>&1; then
            bun install --production 2>/dev/null || echo "No package.json found or dependencies already satisfied"
          else
            echo "⚠️ Bun not found, skipping dependency installation"
          fi
          echo "✅ Server dependencies ready"
          
    - name: Start application service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ROOT_SERVER_HOST }}
        username: ${{ secrets.ROOT_SERVER_USER }}
        password: ${{ secrets.ROOT_SERVER_PASSWORD }}
        script: |
          echo "🚀 Starting dodgeball application service..."

          # Try to start and enable service with sudo
          if sudo -n systemctl start dodgeball-app 2>/dev/null; then
            echo "✅ Service started successfully"
            sudo -n systemctl enable dodgeball-app 2>/dev/null || echo "⚠️ Could not enable service"

            # Wait a moment for service to start
            sleep 3

            # Check service status
            if sudo -n systemctl is-active --quiet dodgeball-app 2>/dev/null; then
              echo "✅ Application service is running"
              sudo -n systemctl status dodgeball-app --no-pager -l 2>/dev/null || echo "Status check completed"
            else
              echo "❌ Application service failed to start"
              sudo -n systemctl status dodgeball-app --no-pager -l 2>/dev/null || echo "Could not get status"
              sudo -n journalctl -u dodgeball-app --no-pager -l -n 20 2>/dev/null || echo "Could not get logs"
              exit 1
            fi
          else
            echo "⚠️ Could not start service automatically - manual restart required"
            echo "Please manually start the service: sudo systemctl start dodgeball-app"
          fi
          
    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ROOT_SERVER_HOST }}
        username: ${{ secrets.ROOT_SERVER_USER }}
        password: ${{ secrets.ROOT_SERVER_PASSWORD }}
        script: |
          echo "🔍 Verifying deployment..."

          # Check if application is responding
          sleep 5
          if curl -f -s http://127.0.0.1:3000 > /dev/null; then
            echo "✅ Application is responding on port 3000"
          else
            echo "❌ Application is not responding on port 3000"
            sudo -n journalctl -u dodgeball-app --no-pager -l -n 10 2>/dev/null || echo "Could not get application logs"
          fi

          # Check nginx status
          if sudo -n systemctl is-active --quiet nginx 2>/dev/null; then
            echo "✅ Nginx is running"
          else
            echo "❌ Nginx is not running"
            sudo -n systemctl status nginx --no-pager 2>/dev/null || echo "Could not get nginx status"
          fi

          # Test external access (if domain is configured)
          echo "🌐 Testing external access..."
          curl -I -s https://sakoa.xyz || echo "External access test failed (may be normal during initial setup)"
          
    - name: Deployment notification
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "🌐 Site should be available at: https://sakoa.xyz"
        echo "🔧 Server: Ubuntu 24 with Bun runtime"
        echo "👤 User: dodgeball-user"
        echo "🔄 Service: dodgeball-app (systemd)"
