name: Deploy to Plesk (Bun)

on:
  workflow_dispatch:  # Manual deployment only (to avoid conflicts with Node.js workflow)

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Build project
      run: bun run build
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        
    - name: Deploy to Plesk via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        # Alternative: use key instead of password
        # key: ${{ secrets.PLESK_SSH_KEY }}
        script: |
          # Navigate to httpdocs directory
          cd /var/www/vhosts/sakoa.xyz/httpdocs

          # Backup current deployment (optional)
          if [ -d "backup" ]; then rm -rf backup; fi
          mkdir backup
          cp -r .output backup/ 2>/dev/null || true
          cp -r server backup/ 2>/dev/null || true

          # Clear current files (except backup)
          rm -rf .output server 2>/dev/null || true
          
    - name: Upload built files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        # Alternative: use key instead of password
        # key: ${{ secrets.PLESK_SSH_KEY }}
        source: ".output/*,server/*"
        target: "/var/www/vhosts/sakoa.xyz/httpdocs"
        strip_components: 0  # Keep directory structure
        
    - name: Create environment file
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        script: |
          cd /var/www/vhosts/sakoa.xyz/httpdocs/.output/server
          cat > .env << EOF
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          EOF
          
    - name: Set file permissions and restart application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        script: |
          cd /var/www/vhosts/sakoa.xyz/httpdocs

          # Set file permissions
          find .output -type f -exec chmod 644 {} \;
          find .output -type d -exec chmod 755 {} \;
          find server -type f -exec chmod 644 {} \;
          find server -type d -exec chmod 755 {} \;
          chmod 600 .output/server/.env

          # Make server executable
          chmod +x .output/server/index.mjs

          # Automated restart for Bun deployment
          echo "🔄 Attempting automated application restart..."

          # Method 1: Plesk Node.js restart command
          if command -v plesk >/dev/null 2>&1; then
            if plesk bin site --update sakoa.xyz -nodejs-restart 2>/dev/null; then
              echo "✅ Plesk Node.js restart command executed successfully"
            else
              echo "⚠️  Plesk Node.js restart command failed, trying alternative methods..."
            fi
          else
            echo "⚠️  Plesk command not available, trying alternative methods..."
          fi

          # Method 2: Passenger restart triggers
          touch restart.txt 2>/dev/null || true
          mkdir -p tmp && touch tmp/restart.txt 2>/dev/null || true
          touch .output/server/restart.txt 2>/dev/null || true
          echo "✅ Passenger restart triggers created"

          # Method 3: Update file timestamps to trigger reload
          find .output/server -name "*.mjs" -exec touch {} \; 2>/dev/null || true

          echo "✅ Automated restart attempts completed"
          
    - name: Test website response
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PLESK_HOST }}
        username: ${{ secrets.PLESK_USERNAME }}
        password: ${{ secrets.PLESK_PASSWORD }}
        script: |
          echo "🌐 Testing website response after restart..."
          sleep 5  # Wait a moment for restart to complete
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://sakoa.xyz/" 2>/dev/null)
          if [[ "$response" =~ ^(200|301|302)$ ]]; then
            echo "✅ Website is responding correctly (HTTP $response)"
          else
            echo "⚠️  Website response: HTTP $response (may need manual restart)"
          fi

    - name: Deployment notification
      run: |
        echo "🚀 Bun deployment completed successfully!"
        echo "🌐 Site: https://sakoa.xyz"
        echo "⚡ Built with Bun for faster performance!"
        echo "🔄 Automated restart attempted - check website response above"
